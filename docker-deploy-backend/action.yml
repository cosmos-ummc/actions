name: 'Deploy service'
description: 'Connect to remote Docker host and deploy the service container'

inputs:
  name:
    description: 'Name of the service'
    required: true
  image:
    description: 'Name of the image'
    required: false
  tag:
    description: 'The image tag to be deploy'
    required: false
    default: 'latest'
  host:
    description: 'Host of the app'
    required: true
  grpc_port:
    description: 'GRPC port for the app'
    required: false
  http_port:
    description: 'HTTP port for the app'
    required: false
  env_file:
    description: 'Path to the encrypted .env file'
    required: true
  dockerhub_username:
    description: 'Username for Docker Hub'
    required: true
  dockerhub_password:
    description: 'Password/Token for Docker Hub'
    required: true
  keys_txt:
    description: 'keys.txt file for SOPS'
    required: true
  ssh_host:
    description: 'The remote Docker host'
    required: true
  ssh_port:
    description: 'SSH port used to connect to the Docker host'
    required: true
  ssh_user:
    description: 'SSH user used to connect to the Docker host'
    required: true
  ssh_key:
    description: 'SSH key used to connect to the Docker host'
    required: true

runs:
  using: 'composite'
  steps:
    - uses: mdgreenwald/mozilla-sops-action@v1

    - name: Set up sops
      shell: bash
      env:
        KEYS_TXT: ${{ inputs.keys_txt }}
      run: |
        mkdir -p $XDG_CONFIG_HOME/sops/age
        echo "$KEYS_TXT" >> $XDG_CONFIG_HOME/sops/age/keys.txt
        sops -d ${{ inputs.env_file }} > .env

    - name: Set up Docker host
      uses: pcjun97/action-setup-docker-host-ssh@v1
      with:
        host: ${{ inputs.ssh_host }}
        port: ${{ inputs.ssh_port }}
        user: ${{ inputs.ssh_user }}
        key: ${{ inputs.ssh_key }}

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    - name: Deploy image
      shell: bash
      run: |
        docker pull cosmosummc/${{ inputs.name }}:${GITHUB_SHA::7}
        docker container stop ${{ inputs.name }} || true
        docker container rm ${{ inputs.name }} || true
        docker container run -d \
          --name ${{ inputs.name }} \
          --restart=unless-stopped \
          --log-driver fluentd \
          --env-file .env \
          -l "traefik.docker.network=bridge" \
          -l "traefik.http.routers.${{ inputs.name }}.rule=Host(\`${{ inputs.host }}\`)" \
          -l "traefik.http.services.${{ inputs.name }}.loadbalancer.server.port=${{ inputs.grpc_port }}" \
          -l "traefik.http.services.${{ inputs.name }}.loadbalancer.server.scheme=h2c" \
          -e "LETSENCRYPT_HOST=${{ inputs.host }}" \
          -e "VIRTUAL_HOST=${{ inputs.host }}" \
          -e "VIRTUAL_PORT=${{ inputs.http_port }}" \
          cosmosummc/${{ inputs.name }}:${GITHUB_SHA::7}
        docker network connect --alias ${{ input.name }} internal ${{ inputs.name }}
        docker system prune -a -f
